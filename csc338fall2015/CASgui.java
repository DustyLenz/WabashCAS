/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CalculatorGUI.java
 *
 * Created on Aug 2, 2011, 5:53:34 PM
 */
package csc338fall2015;

import java.awt.event.KeyEvent;
import java.util.Stack;

/**
 *
 * @author turnerw
 */
public class CASgui extends javax.swing.JFrame {

    // My members
    private CASkernel kernel;           // Kernel to run commands
    private Stack< String > history;    // History of inputs
    private String tempInput;
    private int inputCount;             // Count of next (current) input.
                                            // For looking at history

    /** Creates new form CalculatorGUI */
    public CASgui() {
        initComponents();

        // Initialize my members
        this.kernel = new CASkernel();
        this.history = new Stack< String >();
        this.inputCount = this.history.size();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        InputField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        OutputArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("WallyCompute");

        InputField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        InputField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputFieldActionPerformed(evt);
            }
        });
        InputField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                InputFieldKeyPressed(evt);
            }
        });

        OutputArea.setBackground(new java.awt.Color(204, 255, 255));
        OutputArea.setColumns(20);
        OutputArea.setEditable(false);
        OutputArea.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        OutputArea.setRows(5);
        OutputArea.setFocusable(false);
        OutputArea.setRequestFocusEnabled(false);
        jScrollPane1.setViewportView(OutputArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
                    .addComponent(InputField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(InputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void InputFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputFieldActionPerformed

        // Get text from input field, append to output, and reset input field
        String input = InputField.getText();
        OutputArea.append("> " + input + "\n");
        InputField.setText("");

        // Store input in history and update count
        this.history.add( input );
        this.inputCount = this.history.size();

        // Run command input
        String output;
//        try {
            output = kernel.run(input);
//        } catch (KernelException exception) {
//            output = "Error: " + exception.getLocalizedMessage();
//            System.out.println( "Caught exception : " + exception.toString() );
//        }

        // Append input and output to Output area
        OutputArea.append(output + "\n");

    }//GEN-LAST:event_InputFieldActionPerformed

    private void InputFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_InputFieldKeyPressed

        if( evt.getKeyCode() == KeyEvent.VK_UP ) {
            // Up arrow moves up into command history

            if( this.inputCount == this.history.size() ) {
                // New command.  Save as in temporary storage.
                this.tempInput = InputField.getText();
            }

            // If previous command, change to it.
            if( this.inputCount > 0 )
                InputField.setText( this.history.get( --this.inputCount ));

        } else if( evt.getKeyCode() == KeyEvent.VK_DOWN ) {
            // Down arrow moves down into command history

            if( this.inputCount < this.history.size() - 1 ) {
                InputField.setText( this.history.get( ++this.inputCount ));
            } else if( this.inputCount == this.history.size() - 1 ) {
                // At last stored, so go to temporary storage
                InputField.setText( this.tempInput );
                ++this.inputCount;
            }
        } else if( evt.getKeyCode() == KeyEvent.VK_W
                || evt.getKeyCode() == KeyEvent.VK_F4 ) {

            // CTRL-W or CTRL-F4 closes the window
            int onmask = KeyEvent.CTRL_DOWN_MASK;
            int offmask = KeyEvent.SHIFT_DOWN_MASK | KeyEvent.ALT_DOWN_MASK;
            if( ( evt.getModifiersEx() & (onmask | offmask) ) == onmask ) {
                this.dispose();
            }
        }

    }//GEN-LAST:event_InputFieldKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new CASgui().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField InputField;
    private javax.swing.JTextArea OutputArea;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
